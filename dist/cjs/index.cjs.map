{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/Deferred.ts", "../../src/ProgressedDeferred.ts"],
  "sourcesContent": ["export { default, default as Deferred } from \"./Deferred\";\r\nexport * from \"./Deferred\";\r\nexport { default as ProgressedDeferred } from \"./ProgressedDeferred\";\r\nexport * from \"./ProgressedDeferred\";", "export type DeferredResolver<T = any> = (value: T | PromiseLike<T>) => void;\nexport type DeferredRejector = (reason: Error) => void;\nexport type DeferredExecutor<T> = (resolve: DeferredResolver<T>, reject: DeferredRejector) => void;\nexport type DeferredState = \"pending\" | \"rejected\" | \"resolved\";\n\nexport default class Deferred<T = any> extends Promise<T> {\n\tstatic #count = 0;\n\n\t#resolve: DeferredResolver<T>;\n\t#reject: DeferredRejector;\n\t#state: DeferredState = \"pending\";\n\t#completed = false;\n\t#id = Deferred.#count++;\n\t#rejectionReason?: Error;\n\n\tget completed() { return this.#completed; }\n\tget state() { return this.#state; }\n\tget rejected() { return this.state === \"rejected\"; }\n\tget resolved() { return this.state === \"resolved\"; }\n\tget rejectionReason() { return this.#rejectionReason ?? null; }\n\tget id() { return this.#id; }\n\n\tconstructor(executor?: DeferredExecutor<T>) {\n\t\tlet resolve: DeferredResolver<T>, reject: DeferredRejector;\n\n\t\tsuper((_resolve, _reject) => {\n\t\t\tresolve = _resolve;\n\t\t\treject = _reject;\n\t\t});\n\n\t\tthis.#resolve = value => {\n\t\t\tthis.#assertNotCompleted();\n\t\t\tthis.#state = \"resolved\";\n\t\t\tresolve(value);\n\n\t\t\treturn this.#finished();\n\t\t};\n\t\tthis.#reject = reason => {\n\t\t\tthis.#assertNotCompleted();\n\t\t\tthis.#state = \"rejected\";\n\t\t\treject(reason);\n\n\t\t\treturn this.#finished();\n\t\t};\n\n\t\tif (typeof executor === \"function\") executor.call(this, this.#resolve, this.#reject);\n\t}\n\n\treject(reason: Error) {\n\t\treturn this.#reject(reason), this;\n\t}\n\n\tresolve(value: T | PromiseLike<T>) {\n\t\treturn this.#resolve(value), this;\n\t}\n\n\t#finished() {\n\t\tthis.#completed = true;\n\n\t\treturn this;\n\t}\n\n\t#assertNotCompleted() {\n\t\tif (this.#completed) throw new TypeError(\"The Deferred has already been completed.\");\n\t}\n\n\tstatic [Symbol.species] = Deferred;\n}", "import Deferred, { DeferredRejector, DeferredResolver, DeferredState } from \"./Deferred\";\r\n\r\nexport type ProgressListenerMap = {\r\n\t[key: string]: [...args: any];\r\n};\r\nexport type EventProcessorMap = {\r\n\t[key: string]: (...args: any[]) => any;\r\n};\r\nexport type ToListenerMap<T extends EventProcessorMap> = {\r\n\t[K in keyof T]: Parameters<T[K]>;\r\n};\r\nexport type ProgressedDeferredExecutor<\r\n\tT = any,\r\n\tM extends EventProcessorMap = EventProcessorMap,\r\n> = (progress: ProgressedDeferred<T, M>[\"progress\"], resolve: DeferredResolver<T>, reject: DeferredRejector) => void;\r\nexport type ProgressListener<This extends Deferred> = (this: This, ...args: any[]) => void;\r\n\r\n// @ts-ignore\r\nexport default class ProgressedDeferred<\r\n\tT = any,\r\n\tM extends EventProcessorMap = {},\r\n> extends Deferred<T> {\r\n\tstatic #listeners = new WeakMap<any, Map<string,((...args: any[]) => void)[]>>();\r\n\tstatic #count = 0;\r\n\r\n\t#id = ProgressedDeferred.#count++;\r\n\t#progress: keyof M;\r\n\r\n\tget id() { return this.#id; }\r\n\tget progressState() { return this.#progress; }\r\n\r\n\tconstructor(executor?: ProgressedDeferredExecutor<T, M>) {\r\n\t\tsuper(() => {});\r\n\r\n\t\tProgressedDeferred.#listeners.set(this, new Map());\r\n\r\n\t\tif (typeof executor === \"function\") executor.call(this, this.progress.bind(this), this.resolve.bind(this), this.reject.bind(this));\r\n\t}\r\n\r\n\tprogressed<E extends keyof M>(event: Exclude<E, number | symbol>, listener: (...params: ToListenerMap<M>[E]) => void) {\r\n\t\tthis.#assertNotCompleted();\r\n\t\tthis.#addListener(event, listener);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t#assertNotCompleted() {\r\n\t\tif (this.completed) throw new TypeError(\"The Deferred has already been completed.\");\r\n\t}\r\n\r\n\tprogress<E extends keyof M & string>(event: E, ...eventParams: ToListenerMap<M>[E]) {\r\n\t\tconst map = ProgressedDeferred.#listeners.get(this)!;\r\n\r\n\t\tif (!map.has(event)) map.set(event, []);\r\n\t\tmap.get(event)!.forEach(listener => listener.call(this, ...eventParams));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\t#addListener<E extends keyof M>(event: Exclude<E, number | symbol>, listener: (...args: ToListenerMap<M>[E]) => void) {\r\n\t\tconst map = ProgressedDeferred.#listeners.get(this)!;\r\n\r\n\t\tif (!map.has(event)) map.set(event, []);\r\n\r\n\t\tmap.get(event)!.push(listener as (...args: any[]) => void);\r\n\t}\r\n\r\n\tstatic [Symbol.species] = ProgressedDeferred;\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAKA,8BAA+C,QAAW;AAAA,EAiBzD,YAAY,UAAgC;AAC3C,QAAI,SAA8B;AAElC,UAAM,CAAC,WAAU,aAAY;AAC5B,gBAAU;AACV,eAAS;AAAA,IACV,CAAC;AA4BF;AAMA;AAtDA;AACA;AACA,+BAAwB;AACxB,mCAAa;AACb,4BAAe,AAAT,4BAAS,QAAT;AACN;AAiBC,uBAAK,UAAW,WAAS;AACxB,4BAAK,4CAAL;AACA,yBAAK,QAAS;AACd,cAAQ,KAAK;AAEb,aAAO,sBAAK,wBAAL;AAAA,IACR;AACA,uBAAK,SAAU,YAAU;AACxB,4BAAK,4CAAL;AACA,yBAAK,QAAS;AACd,aAAO,MAAM;AAEb,aAAO,sBAAK,wBAAL;AAAA,IACR;AAEA,QAAI,OAAO,aAAa;AAAY,eAAS,KAAK,MAAM,mBAAK,WAAU,mBAAK,QAAO;AAAA,EACpF;AAAA,MA/BI,YAAY;AAAE,WAAO,mBAAK;AAAA,EAAY;AAAA,MACtC,QAAQ;AAAE,WAAO,mBAAK;AAAA,EAAQ;AAAA,MAC9B,WAAW;AAAE,WAAO,KAAK,UAAU;AAAA,EAAY;AAAA,MAC/C,WAAW;AAAE,WAAO,KAAK,UAAU;AAAA,EAAY;AAAA,MAC/C,kBAAkB;AAAE,WAAO,mBAAK,qBAAoB;AAAA,EAAM;AAAA,MAC1D,KAAK;AAAE,WAAO,mBAAK;AAAA,EAAK;AAAA,EA4B5B,OAAO,QAAe;AACrB,WAAO,mBAAK,SAAL,WAAa,SAAS;AAAA,EAC9B;AAAA,EAEA,QAAQ,OAA2B;AAClC,WAAO,mBAAK,UAAL,WAAc,QAAQ;AAAA,EAC9B;AAaD;AA9DA;AALA,AAkES,YAAO;AA5DR;AAEP;AACA;AACA;AACA;AACA;AACA;AA2CA;AAAA,cAAS,WAAG;AACX,qBAAK,YAAa;AAElB,SAAO;AACR;AAEA;AAAA,wBAAmB,WAAG;AACrB,MAAI,mBAAK;AAAY,UAAM,IAAI,UAAU,0CAA0C;AACpF;AA1DO,aADR,UACQ,QAAS;AA4DR,cA7DT,UA6DS,IAAkB;;;AClE3B;AAkBA,wCAGU,SAAY;AAAA,EAUrB,YAAY,UAA6C;AACxD,UAAM,MAAM;AAAA,IAAC,CAAC;AAcf;AAcA;AAnCA,6BAAyB,AAAnB,sCAAmB,SAAnB;AACN;AAQC,sCAAmB,YAAW,IAAI,MAAM,oBAAI,IAAI,CAAC;AAEjD,QAAI,OAAO,aAAa;AAAY,eAAS,KAAK,MAAM,KAAK,SAAS,KAAK,IAAI,GAAG,KAAK,QAAQ,KAAK,IAAI,GAAG,KAAK,OAAO,KAAK,IAAI,CAAC;AAAA,EAClI;AAAA,MATI,KAAK;AAAE,WAAO,mBAAK;AAAA,EAAK;AAAA,MACxB,gBAAgB;AAAE,WAAO,mBAAK;AAAA,EAAW;AAAA,EAU7C,WAA8B,OAAoC,UAAoD;AACrH,0BAAK,8CAAL;AACA,0BAAK,8BAAL,WAAkB,OAAO;AAEzB,WAAO;AAAA,EACR;AAAA,EAMA,SAAqC,UAAa,aAAkC;AACnF,UAAM,MAAM,kCAAmB,YAAW,IAAI,IAAI;AAElD,QAAI,CAAC,IAAI,IAAI,KAAK;AAAG,UAAI,IAAI,OAAO,CAAC,CAAC;AACtC,QAAI,IAAI,KAAK,EAAG,QAAQ,cAAY,SAAS,KAAK,MAAM,GAAG,WAAW,CAAC;AAEvE,WAAO;AAAA,EACR;AAYD;AAnDA;AAlBA,AAoES,aAAO;AA9CR;AACA;AAEP;AACA;AAoBA;AAAA,yBAAmB,WAAG;AACrB,MAAI,KAAK;AAAW,UAAM,IAAI,UAAU,0CAA0C;AACnF;AAYA;AAAA,iBAA+B,SAAC,OAAoC,UAAkD;AACrH,QAAM,MAAM,kCAAmB,YAAW,IAAI,IAAI;AAElD,MAAI,CAAC,IAAI,IAAI,KAAK;AAAG,QAAI,IAAI,OAAO,CAAC,CAAC;AAEtC,MAAI,IAAI,KAAK,EAAG,KAAK,QAAoC;AAC1D;AA5CO,aAJR,oBAIQ,YAAa,oBAAI,QAAuD;AACxE,aALR,oBAKQ,SAAS;AA6CR,cAlDT,oBAkDS,KAAkB;",
  "names": []
}
