{
  "version": 3,
  "sources": ["../../node_modules/@thundercraft5/node-errors/src/utils/formatWordList.ts", "../../node_modules/@thundercraft5/node-errors/src/utils/formatErrorMessage.ts", "../../node_modules/@thundercraft5/node-errors/src/makeCodedError.ts", "../../node_modules/@thundercraft5/node-errors/src/nativeMessages.ts", "../../node_modules/@thundercraft5/node-errors/src/makeErrors.ts", "../../node_modules/@thundercraft5/node-errors/src/nativeErrors.ts", "../../node_modules/@thundercraft5/node-errors/src/symbols.ts", "../../node_modules/@thundercraft5/node-errors/src/utils/isCodedErrorClass.ts", "../../node_modules/@thundercraft5/node-errors/src/utils/isCodedError.ts", "../../src/errors.ts", "../../src/Deferred.ts", "../../src/ProgressedDeferred.ts"],
  "sourcesContent": ["export default function formatWordList(list: string[], and = false) {\r\n\tconst last = list.pop(),\r\n\t\tlastWord = and ? \"and\" : \"or\";\r\n\r\n\tif (list.length > 1) {\r\n\t\tconst commaSeparated = list.map((s, i) => `${ i % 5 == 0 && i ? \"\\n\" : \"\" }\"${ s }\"`);\r\n\r\n\t\treturn `${ commaSeparated.join(\", \") }, ${ lastWord } \"${ last }\"`;\r\n\t} else\r\n\t\treturn `${ list.length == 1 ? `\"${ list[0] }\" ${ lastWord } ` : \"\" }\"${ last }\"`;\r\n}", "import { RangeError, ReferenceError } from \"../nativeErrors\";\r\nimport { FormattableMessageParams, MessageFormatter, MessageKeys, MessageMap } from \"../types\";\r\n\r\nimport formatWordList from \"./formatWordList\";\r\n\r\nexport default function formatErrorMessage<\r\n\tM extends MessageMap,\r\n\tCode extends MessageKeys<M>,\r\n>(messages: M, code: Code, ...formats: FormattableMessageParams<M, Code>) {\r\n\tif (!(code in messages))\r\n\t\tthrow new ReferenceError(\"INVALID_MESSAGE_CODE\", code, formatWordList(Object.keys(messages)));\r\n\r\n\tconst message = typeof messages[code] === \"function\"\r\n\t\t// eslint-disable-next-line\r\n\t\t? (messages[code] as MessageFormatter)(...formats)\r\n\t\t: messages[code];\r\n\r\n\tif (typeof messages[code] === \"function\" && messages[code].length > formats.length)\r\n\t\tthrow new RangeError(\"MESSAGE_CODE_MISSING_FORMATS\", code, messages[code].length, formats.length);\r\n\r\n\treturn message as string;\r\n}", "import { TypeError } from \"./nativeErrors\";\r\nimport { FormattableMessageParams, MessageKeys, MessageMap } from \"./types\";\r\nimport { SymbolCode, SymbolCodedError, SymbolCodedErrorClass, SymbolRawMessage } from \"./symbols\";\r\n\r\nimport formatErrorMessage from \"./utils/formatErrorMessage\";\r\n\r\nexport default function makeCodedError<\r\n\tM extends MessageMap,\r\n\tT extends abstract new (...args: any[]) => Error,\r\n>(messages: M, Base: T) {\r\n\t// if (SymbolCodedErrorClass in Base) throw new TypeError(\"ERROR_CLASS_ALREADY_EXTENDED\", Base);\r\n\tif (\"$$<Symbol>codedError\" in Base) throw new TypeError(\"ERROR_CLASS_ALREADY_EXTENDED\", Base);\r\n\r\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n\t// @ts-ignore - Bug\r\n\treturn class <Code extends MessageKeys<M>> extends Base {\r\n\t\t// static get [SymbolCodedErrorClass]() { return true; }\r\n\t\tstatic get [\"$$<Symbol>codedErrorClass\"]() { return true; }\r\n\t\tstatic [Symbol.hasInstance](instance: any) {\r\n\t\t\tlet constructor = instance[Symbol.species] || instance.constructor;\r\n\t\t\treturn instance instanceof Base || constructor === this;\r\n\t\t}\r\n\r\n\t\tstatic {\r\n\t\t\tObject.defineProperty(this, \"name\", { value: Base.name });\r\n\t\t}\r\n\r\n\t\t#message = \"\";\r\n\t\t/*\r\n\t\t * readonly [SymbolCodedError]: true;\r\n\t\t * readonly [SymbolCode]: string;\r\n\t\t * readonly [SymbolRawMessage]: string;\r\n\t\t */\r\n\t\treadonly [\"$$<Symbol>codedError\"]: true;\r\n\t\treadonly [\"$$<Symbol>code\"]: string;\r\n\t\treadonly [\"$$<Symbol>rawMessage\"]: string;\r\n\r\n\t\tconstructor(code: Code, ...formats: FormattableMessageParams<M, Code>) {\r\n\t\t\tsuper(formatErrorMessage(messages, code, ...formats));\r\n\r\n\t\t\tif (typeof messages[code] !== \"string\")\r\n\t\t\t\t// this[SymbolRawMessage] = messages[code]?.toString() ?? null;\r\n\t\t\t\tthis[\"$$<Symbol>rawMessage\"] = messages[code]?.toString() ?? null;\r\n\r\n\t\t\tthis[\"$$<Symbol>code\"] = code.toLocaleUpperCase();\r\n\t\t\t// Object.defineProperty(this, SymbolCodedError, { value: true });\r\n\t\t\tObject.defineProperty(this, \"$$<Symbol>codedError\", { value: true });\r\n\t\t}\r\n\r\n\t\tget name() {\r\n\t\t\treturn `${ this.getErrorName() }${ this[\"$$<Symbol>code\"] ? ` [${ this[\"$$<Symbol>code\"] }]` : \"\" }`;\r\n\t\t}\r\n\r\n\t\tget message() {\r\n\t\t\treturn !this.#message ? \"\" : this.#message;\r\n\t\t}\r\n\r\n\t\tset message(value) {\r\n\t\t\tthis.#message = value;\r\n\t\t}\r\n\r\n\t\tget [Symbol.species]() { return Base; }\r\n\r\n\t\tget [Symbol.toStringTag]() {\r\n\t\t\treturn this.getErrorName();\r\n\t\t}\r\n\r\n\t\tgetErrorName() {\r\n\t\t\tconst names = [];\r\n\t\t\tlet cur = this.constructor;\r\n\r\n\t\t\twhile (cur) {\r\n\t\t\t\tnames.push(cur.name);\r\n\t\t\t\tcur = Object.getPrototypeOf(cur);\r\n\t\t\t}\r\n\r\n\t\t\treturn names.find(name => name != \"CodedError\");\r\n\t\t}\r\n\t};\r\n}", "import type { ErrorClass } from \"./types\";\r\n\r\nconst messages = {\r\n\tERROR_CLASS_ALREADY_EXTENDED: (Class: ErrorClass) => `Error class \"${ Class.name }\" is already a coded error class.`,\r\n\tINVALID_MESSAGE_CODE: (code = \"\", validCodes = \"\") => `Error code \"${ code }\" was not found in the provided messages registry.\\nList of valid codes: ${ validCodes }`,\r\n\tMESSAGE_CODE_MISSING_FORMATS: (code = \"\", required = 0, received = 0) => `Message code \"${ code }\" expects at least ${ required } format arguments, got ${ received } instead`,\r\n\tMETHOD_NOT_IMPLEMENTED: (Class: Function, name = \"\") => `Method ${ Class.name }#${ name }() is not implemented.`,\r\n};\r\n\r\nexport default messages;", "import makeCodedError from \"./makeCodedError\";\r\nimport { ErrorClass, MessageMap } from './types';\r\nimport nativeMessages from \"./nativeMessages\";\r\nimport type { SymbolCode, SymbolCodedError, SymbolCodedErrorClass, SymbolRawMessage } from \"./symbols\";\r\n\r\nexport type ErrorsDescriptor = {\r\n\t[key: string]: ErrorClass;\r\n};\r\n\r\nexport type ErrorMap<M extends MessageMap, E extends ErrorsDescriptor> = {\r\n\t[key in keyof E]?: ReturnType<typeof makeCodedError<M, E[key]>>;\r\n}\r\n\r\nexport default function makeErrors<\r\n\tM extends MessageMap,\r\n\tE extends ErrorsDescriptor,\r\n>(messages: M, errors: E, includeNativeCodes: true): Required<ErrorMap<M & typeof nativeMessages, E>>;\r\n\r\nexport default function makeErrors<\r\n\tM extends MessageMap,\r\n\tE extends ErrorsDescriptor,\r\n>(messages: M, errors: E): Required<ErrorMap<M, E>>;\r\n\r\nexport default function makeErrors<\r\n\tM extends MessageMap,\r\n\tE extends ErrorsDescriptor,\r\n>(messages: M, errors: E, includeNativeCodes = true) {\r\n\tif (includeNativeCodes) messages = { ...messages, ...nativeMessages }\r\n\r\n\tconst ret: ErrorMap<M | M & typeof nativeMessages, E> = {};\r\n\tconst entries = Object.entries(errors);\r\n\r\n\tfor (const [k, error] of entries) {\r\n\t\t// @ts-ignore\r\n\t\tret[k] = makeCodedError(messages, error);\r\n\t}\r\n\r\n\treturn ret as Required<ErrorMap<M | M & typeof nativeMessages, E>>;\r\n}", "import makeErrors from \"./makeErrors\";\r\nimport messages from \"./nativeMessages\";\r\n\r\nimport type { SymbolCode, SymbolCodedError, SymbolCodedErrorClass, SymbolRawMessage } from \"./symbols\";\r\n\r\nexport const\r\n\t{\r\n\t\tTypeError,\r\n\t\tRangeError,\r\n\t\tReferenceError,\r\n\t\tError,\r\n\t} = makeErrors(messages, {\r\n\t\tTypeError: globalThis.TypeError,\r\n\t\tRangeError: globalThis.RangeError,\r\n\t\tReferenceError: globalThis.ReferenceError,\r\n\t\tError: globalThis.Error,\r\n\t});", "\r\nexport const\r\n\tSymbolCodedErrorClass = Symbol(\"codedErrorClass\"),\r\n\tSymbolCodedError = Symbol(\"codedError\"),\r\n\tSymbolCode = Symbol(\"code\"),\r\n\tSymbolRawMessage = Symbol(\"rawMessage\");", "import { SymbolCodedErrorClass } from \"../symbols\";\r\n\r\nexport default function isCodedErrorClass(ErrorClass: typeof Error) {\r\n\t// return SymbolCodedErrorClass in ErrorClass;\r\n\treturn \"$$<Symbol>codedErrorClass\" in ErrorClass;\r\n}", "import { SymbolCode } from \"../symbols\";\r\n\r\nexport default function isCodedError(errorObject: Error) {\r\n\t// return SymbolCode in errorObject;\r\n\treturn \"$$<Symbol>code\" in errorObject;\r\n}", "import makeErrors from \"@thundercraft5/node-errors\";\r\n\r\nexport const { DeferredError } = makeErrors({\r\n\tDEFERRED_ALREADY_COMPLETE: (id: number) => `The deferred with id #${ id } has already been resolved or rejected.`,\r\n\tREJECTION_REASON_NOT_ERROR: (value: any) => `Deferred rejection reasons must be subclasses of \"Error\" (got ${ typeof value } \"${ String(value) }\" instead).`,\r\n}, {\r\n\tDeferredError: class DeferredError extends Error {},\r\n});", "import { DeferredError } from \"./errors\";\n\nexport type DeferredResolver<T = any> = (value: T | PromiseLike<T>) => void;\nexport type DeferredRejector = (reason: Error) => void;\nexport type DeferredExecutor<T> = (resolve: DeferredResolver<T>, reject: DeferredRejector, deferred: Deferred<T>) => void;\nexport type DeferredState = \"pending\" | \"rejected\" | \"resolved\";\n\nexport default class Deferred<T = any> extends Promise<T> {\n\tstatic #count = 0;\n\n\t#resolve: DeferredResolver<T>;\n\t#reject: DeferredRejector;\n\t#state: DeferredState = \"pending\";\n\t#completed = false;\n\t#id = Deferred.#count++;\n\t#rejectionReason?: Error;\n\n\tget completed() { return this.#completed; }\n\tget state() { return this.#state; }\n\tget rejected() { return this.state === \"rejected\"; }\n\tget resolved() { return this.state === \"resolved\"; }\n\tget rejectionReason() { return this.#rejectionReason ?? null; }\n\tget id() { return this.#id; }\n\n\tconstructor(executor?: DeferredExecutor<T>) {\n\t\tlet resolve: DeferredResolver<T>, reject: DeferredRejector;\n\n\t\tsuper((_resolve, _reject) => {\n\t\t\tresolve = _resolve;\n\t\t\treject = _reject;\n\t\t});\n\n\t\tthis.#resolve = value => {\n\t\t\tthis.#assertNotCompleted();\n\t\t\tthis.#state = \"resolved\";\n\t\t\tresolve(value);\n\n\t\t\treturn this.#finished();\n\t\t};\n\t\tthis.#reject = reason => {\n\t\t\tthis.#assertNotCompleted();\n\t\t\tthis.#state = \"rejected\";\n\t\t\treject(reason);\n\n\t\t\treturn this.#finished();\n\t\t};\n\n\t\tif (typeof executor === \"function\") executor.call(this, this.#resolve, this.#reject, this);\n\t}\n\n\treject(reason: Error) {\n\t\tif (!(reason instanceof Error)) throw new DeferredError(\"REJECTION_REASON_NOT_ERROR\", reason);\n\n\t\treturn this.#reject(reason), this;\n\t}\n\n\tresolve(value: T | PromiseLike<T>) {\n\t\treturn this.#resolve(value), this;\n\t}\n\n\t#finished() {\n\t\tthis.#completed = true;\n\n\t\treturn this;\n\t}\n\n\t#assertNotCompleted() {\n\t\tif (this.#completed) throw new DeferredError(\"DEFERRED_ALREADY_COMPLETE\", this.#id);\n\t}\n\n\tstatic get [Symbol.species]() { return Deferred; }\n}", "import Deferred, { DeferredRejector, DeferredResolver, DeferredState } from \"./Deferred\";\r\nimport { DeferredError } from \"./errors\";\r\n\r\nexport type ProgressListenerMap = {\r\n\t[key: string]: [...args: any];\r\n};\r\nexport type EventProcessorMap = {\r\n\t[key: string]: (...args: any[]) => any;\r\n};\r\nexport type ToListenerMap<T extends EventProcessorMap> = {\r\n\t[K in keyof T]: Parameters<T[K]>;\r\n};\r\nexport type ProgressedDeferredExecutor<\r\n\tT = void,\r\n\tM extends EventProcessorMap = EventProcessorMap,\r\n> = (resolve: DeferredResolver<T>, reject: DeferredRejector, progress: ProgressedDeferred<T, M>[\"progress\"], deferred: ProgressedDeferred<T, M>) => void;\r\nexport type ProgressListener<This extends Deferred> = (this: This, ...args: any[]) => void;\r\n\r\n// @ts-ignore\r\nexport default class ProgressedDeferred<\r\n\tT = void,\r\n\tM extends EventProcessorMap = {},\r\n> extends Deferred<T> {\r\n\tstatic #listeners = new WeakMap<any, Map<string, ((...args: any[]) => void)[]>>();\r\n\tstatic #count = 0;\r\n\r\n\t#id = ProgressedDeferred.#count++;\r\n\t#progress: keyof M;\r\n\r\n\tget id() { return this.#id; }\r\n\tget progressState() { return this.#progress; }\r\n\r\n\tconstructor(executor?: ProgressedDeferredExecutor<T, M>) {\r\n\t\tsuper(() => {});\r\n\r\n\t\tProgressedDeferred.#listeners.set(this, new Map());\r\n\r\n\t\tthis.resolve = this.resolve.bind(this);\r\n\t\tthis.reject = this.reject.bind(this);\r\n\t\tthis.progress = this.progress.bind(this);\r\n\r\n\t\tif (typeof executor === \"function\") executor.call(this, this.resolve, this.reject, this.progress, this);\r\n\t}\r\n\r\n\tprogressed<E extends keyof M>(event: Exclude<E, number | symbol>, listener: (...params: ToListenerMap<M>[E]) => void & ThisType<this>) {\r\n\t\tthis.#assertNotCompleted();\r\n\t\tthis.#addListener(event, listener);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t#assertNotCompleted() {\r\n\t\tif (this.completed) throw new DeferredError(\"DEFERRED_ALREADY_COMPLETE\", this.#id);\r\n\t}\r\n\r\n\tprogress<E extends keyof M & string>(event: E, ...eventParams: ToListenerMap<M>[E]) {\r\n\t\tconst map = ProgressedDeferred.#listeners.get(this)!;\r\n\r\n\t\tif (!map.has(event)) map.set(event, []);\r\n\t\tmap.get(event)!.forEach(listener => listener.call(this, ...eventParams));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\t#addListener<E extends keyof M>(\r\n\t\tevent: Exclude<E, number | symbol>,\r\n\t\tlistener: (...args: ToListenerMap<M>[E]) => void & ThisType<this>,\r\n\t) {\r\n\t\tconst map = ProgressedDeferred.#listeners.get(this)!;\r\n\r\n\t\tif (!map.has(event)) map.set(event, []);\r\n\r\n\t\tmap.get(event)!.push(listener as (...args: any[]) => void & ThisType<this>);\r\n\t}\r\n\r\n\tstatic get [Symbol.species]() { return ProgressedDeferred; }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAe,wBAAwB,MAAgB,MAAM,OAAO;AACnE,QAAM,OAAO,KAAK,IAAI,GACrB,WAAW,MAAM,QAAQ;AAE1B,MAAI,KAAK,SAAS,GAAG;AACpB,UAAM,iBAAiB,KAAK,IAAI,CAAC,GAAG,MAAM,GAAI,IAAI,KAAK,KAAK,IAAI,OAAO,MAAQ,IAAK;AAEpF,WAAO,GAAI,eAAe,KAAK,IAAI,MAAQ,aAAe;EAC3D;AACC,WAAO,GAAI,KAAK,UAAU,IAAI,IAAK,KAAK,OAAS,cAAe,MAAQ;AAC1E;ACLe,4BAGb,WAAa,SAAe,SAA4C;AACzE,MAAI,CAAE,SAAQ;AACb,UAAM,IAAI,eAAe,wBAAwB,MAAM,eAAe,OAAO,KAAK,SAAQ,CAAC,CAAC;AAE7F,QAAM,UAAU,OAAO,UAAS,UAAU,aAEtC,UAAS,MAA2B,GAAG,OAAO,IAC/C,UAAS;AAEZ,MAAI,OAAO,UAAS,UAAU,cAAc,UAAS,MAAM,SAAS,QAAQ;AAC3E,UAAM,IAAI,WAAW,gCAAgC,MAAM,UAAS,MAAM,QAAQ,QAAQ,MAAM;AAEjG,SAAO;AACR;ACfe,wBAGb,WAAa,MAAS;AAEvB,MAAI,0BAA0B;AAAM,UAAM,IAAI,WAAU,gCAAgC,IAAI;AAI5F,SAAO,cAA4C,KAAK;gBAE3C,+BAA+B;AAAE,aAAO;IAAM;YAClD,OAAO,aAAa,UAAe;AAC1C,UAAI,cAAc,SAAS,OAAO,YAAY,SAAS;AACvD,aAAO,oBAAoB,QAAQ,gBAAgB;IACpD;WAEO;AACN,aAAO,eAAe,MAAM,QAAQ,EAAE,OAAO,KAAK,KAAK,CAAC;IACzD;IAEA,WAAW;KAMD;KACA;KACA;IAEV,YAAY,SAAe,SAA4C;AACtE,YAAM,mBAAmB,WAAU,MAAM,GAAG,OAAO,CAAC;AAEpD,UAAI,OAAO,UAAS,UAAU;AAE7B,aAAK,0BAA0B,UAAS,OAAO,SAAS,KAAK;AAE9D,WAAK,oBAAoB,KAAK,kBAAkB;AAEhD,aAAO,eAAe,MAAM,wBAAwB,EAAE,OAAO,KAAK,CAAC;IACpE;QAEI,OAAO;AACV,aAAO,GAAI,KAAK,aAAa,IAAM,KAAK,oBAAoB,KAAM,KAAK,uBAAwB;IAChG;QAEI,UAAU;AACb,aAAO,CAAC,gBAAgB,KAAK;IAC9B;QAEI,QAAQ,OAAO;AAClB,sBAAgB;IACjB;SAEK,OAAO,WAAW;AAAE,aAAO;IAAM;SAEjC,OAAO,eAAe;AAC1B,aAAO,KAAK,aAAa;IAC1B;IAEA,eAAe;AACd,YAAM,QAAQ,CAAC;AACf,UAAI,MAAM,KAAK;AAEf,aAAO,KAAK;AACX,cAAM,KAAK,IAAI,IAAI;AACnB,cAAM,OAAO,eAAe,GAAG;MAChC;AAEA,aAAO,MAAM,KAAK,CAAA,SAAQ,QAAQ,YAAY;IAC/C;EACD;AACD;AC7EA,IAAM,WAAW;EAChB,8BAA8B,CAAC,UAAsB,gBAAiB,MAAM;EAC5E,sBAAsB,CAAC,OAAO,IAAI,aAAa,OAAO,eAAgB;uBAAkF;EACxJ,8BAA8B,CAAC,OAAO,IAAI,WAAW,GAAG,WAAW,MAAM,iBAAkB,0BAA4B,kCAAoC;EAC3J,wBAAwB,CAAC,OAAiB,OAAO,OAAO,UAAW,MAAM,QAAU;AACpF;AAEA,IAAO,yBAAQ;ACcA,oBAGb,WAAa,QAAW,qBAAqB,MAAM;AACpD,MAAI;AAAoB,gBAAW,KAAK,cAAa,uBAAe;AAEpE,QAAM,MAAkD,CAAC;AACzD,QAAM,UAAU,OAAO,QAAQ,MAAM;AAErC,aAAW,CAAC,GAAG,UAAU,SAAS;AAEjC,QAAI,KAAK,eAAe,WAAU,KAAK;EACxC;AAEA,SAAO;AACR;ACjCO,IACN;EACC;EACA;EACA;EACA;IACG,WAAW,wBAAU;EACxB,WAAW,WAAW;EACtB,YAAY,WAAW;EACvB,gBAAgB,WAAW;EAC3B,OAAO,WAAW;AACnB,CAAC;ACfK,IACN,wBAAwB,OAAO,iBAAiB;AAD1C,IAEN,mBAAmB,OAAO,YAAY;AAFhC,IAGN,aAAa,OAAO,MAAM;AAHpB,IAIN,mBAAmB,OAAO,YAAY;;;AGHhC,IAAM,EAAE,kBAAkB,WAAW;AAAA,EAC3C,2BAA2B,CAAC,OAAe,yBAA0B;AAAA,EACrE,4BAA4B,CAAC,UAAe,iEAAkE,OAAO,UAAY,OAAO,KAAK;AAC9I,GAAG;AAAA,EACF,eAAe,MAAM,uBAAsB,MAAM;AAAA,EAAC;AACnD,CAAC;;;ACPD;AAOA,8BAA+C,QAAW;AAAA,EAiBzD,YAAY,UAAgC;AAC3C,QAAI,SAA8B;AAElC,UAAM,CAAC,WAAU,aAAY;AAC5B,gBAAU;AACV,eAAS;AAAA,IACV,CAAC;AA8BF;AAMA;AAxDA;AACA;AACA,+BAAwB;AACxB,mCAAa;AACb,4BAAe,AAAT,4BAAS,QAAT;AACN;AAiBC,uBAAK,UAAW,WAAS;AACxB,4BAAK,4CAAL;AACA,yBAAK,QAAS;AACd,cAAQ,KAAK;AAEb,aAAO,sBAAK,wBAAL;AAAA,IACR;AACA,uBAAK,SAAU,YAAU;AACxB,4BAAK,4CAAL;AACA,yBAAK,QAAS;AACd,aAAO,MAAM;AAEb,aAAO,sBAAK,wBAAL;AAAA,IACR;AAEA,QAAI,OAAO,aAAa;AAAY,eAAS,KAAK,MAAM,mBAAK,WAAU,mBAAK,UAAS,IAAI;AAAA,EAC1F;AAAA,MA/BI,YAAY;AAAE,WAAO,mBAAK;AAAA,EAAY;AAAA,MACtC,QAAQ;AAAE,WAAO,mBAAK;AAAA,EAAQ;AAAA,MAC9B,WAAW;AAAE,WAAO,KAAK,UAAU;AAAA,EAAY;AAAA,MAC/C,WAAW;AAAE,WAAO,KAAK,UAAU;AAAA,EAAY;AAAA,MAC/C,kBAAkB;AAAE,WAAO,mBAAK,qBAAoB;AAAA,EAAM;AAAA,MAC1D,KAAK;AAAE,WAAO,mBAAK;AAAA,EAAK;AAAA,EA4B5B,OAAO,QAAe;AACrB,QAAI,CAAE,mBAAkB;AAAQ,YAAM,IAAI,cAAc,8BAA8B,MAAM;AAE5F,WAAO,mBAAK,SAAL,WAAa,SAAS;AAAA,EAC9B;AAAA,EAEA,QAAQ,OAA2B;AAClC,WAAO,mBAAK,UAAL,WAAc,QAAQ;AAAA,EAC9B;AAAA,cAYY,OAAO,WAAW;AAAE,WAAO;AAAA,EAAU;AAClD;AAhEA;AACQ;AAEP;AACA;AACA;AACA;AACA;AACA;AA6CA;AAAA,cAAS,WAAG;AACX,qBAAK,YAAa;AAElB,SAAO;AACR;AAEA;AAAA,wBAAmB,WAAG;AACrB,MAAI,mBAAK;AAAY,UAAM,IAAI,cAAc,6BAA6B,mBAAK,IAAG;AACnF;AA5DO,aADR,UACQ,QAAS;;;ACRjB;AAmBA,wCAGU,SAAY;AAAA,EAUrB,YAAY,UAA6C;AACxD,UAAM,MAAM;AAAA,IAAC,CAAC;AAkBf;AAcA;AAvCA,6BAAyB,AAAnB,sCAAmB,SAAnB;AACN;AAQC,sCAAmB,YAAW,IAAI,MAAM,oBAAI,IAAI,CAAC;AAEjD,SAAK,UAAU,KAAK,QAAQ,KAAK,IAAI;AACrC,SAAK,SAAS,KAAK,OAAO,KAAK,IAAI;AACnC,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AAEvC,QAAI,OAAO,aAAa;AAAY,eAAS,KAAK,MAAM,KAAK,SAAS,KAAK,QAAQ,KAAK,UAAU,IAAI;AAAA,EACvG;AAAA,MAbI,KAAK;AAAE,WAAO,mBAAK;AAAA,EAAK;AAAA,MACxB,gBAAgB;AAAE,WAAO,mBAAK;AAAA,EAAW;AAAA,EAc7C,WAA8B,OAAoC,UAAqE;AACtI,0BAAK,8CAAL;AACA,0BAAK,8BAAL,WAAkB,OAAO;AAEzB,WAAO;AAAA,EACR;AAAA,EAMA,SAAqC,UAAa,aAAkC;AACnF,UAAM,MAAM,kCAAmB,YAAW,IAAI,IAAI;AAElD,QAAI,CAAC,IAAI,IAAI,KAAK;AAAG,UAAI,IAAI,OAAO,CAAC,CAAC;AACtC,QAAI,IAAI,KAAK,EAAG,QAAQ,cAAY,SAAS,KAAK,MAAM,GAAG,WAAW,CAAC;AAEvE,WAAO;AAAA,EACR;AAAA,cAcY,OAAO,WAAW;AAAE,WAAO;AAAA,EAAoB;AAC5D;AA1DA;AAIQ;AACA;AAEP;AACA;AAwBA;AAAA,yBAAmB,WAAG;AACrB,MAAI,KAAK;AAAW,UAAM,IAAI,cAAc,6BAA6B,mBAAK,KAAG;AAClF;AAYA;AAAA,iBAA+B,SAC9B,OACA,UACC;AACD,QAAM,MAAM,kCAAmB,YAAW,IAAI,IAAI;AAElD,MAAI,CAAC,IAAI,IAAI,KAAK;AAAG,QAAI,IAAI,OAAO,CAAC,CAAC;AAEtC,MAAI,IAAI,KAAK,EAAG,KAAK,QAAqD;AAC3E;AAnDO,aAJR,oBAIQ,YAAa,oBAAI,QAAwD;AACzE,aALR,oBAKQ,SAAS;",
  "names": []
}
